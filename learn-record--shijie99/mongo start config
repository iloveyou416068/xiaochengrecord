一、start config
1.start all config servers with --configsvr --replSet <name> options:
mongod --configsvr --replSet configReplSet --port  <port> --dbpath <path>

2.add shard members to config servers
rs.initiate({
    _id:"configReplSet",
    configsvr:true,
    members:[
        {_id:0,host:"<host>:<port>"},
    ]
})

二、start mongos-route
1.start one or more mongos instances with --configdb,or sharding.configDB,specify the config server replica set name followed by a slash / and at least one of the config server hostnames and ports:
mongos --configdb configReplSet/<cfgsvr1:port1>,<cfgsvr2:port2>

三、add Shards to Cluster
1.mongo --host <hostname of machine running mongos> --port <prot mongos listens on>

mongo --host mongx.net --port 27017

2.add each shard to thee cluster using the sh.addShard
sh.addShard("rs1/mongo.net:27017")

四、Enable Sharding for database
1.connect to mongos instance:
mongo --host <hsotname> --port <port mongos listens on>
2.sh enableSharding("<database>") method ,specifying the name of the database for which to enable sharding
or using the folloing syntax:
db.runCommand({enableSharding:<database>})
五、Shard a Collection
1.Determine what you will use for the shard key.
2.if the collection already contains data you must create an index on the shard key using createIndex().
if the collection is empty the MongoDB will create the index as part of the sh.shardCollection() step;
3.folloing syntgax:
sh.shardCollection("<database>.<collection>", shard-key-pattern)
sh.shardCollection("records.people", { "zipcode": 1, "name": 1 } )
sh.shardCollection("people.addresses", { "state": 1, "_id": 1 } )
sh.shardCollection("assets.chairs", { "type": 1, "_id": 1 } )
sh.shardCollection("events.alerts", { "_id": "hashed" } )


六、add shard to cluster
1./data/mongodb/bin/mongod --shardsvr --replSet shard1 --port 22001 --dbpath /data/shard/s0 --logpath /data/shard/log/shard1.log --fork --nojournal --oplogSize 10   --profile=1 --slowms=15 --keyFile /data/key/r0



{ addshard : “replicaSetName/[:port][,serverhostname2[:port],…]


 db.serverStatus().connections

 ulimit -n 2500